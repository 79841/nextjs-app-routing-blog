"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[155],{5155:function(n,e,r){r.r(e);var s=r(7437),a=r(8779);function t(n){let e=Object.assign({h1:"h1",p:"p",a:"a",br:"br",h2:"h2",pre:"pre",code:"code",img:"img"},(0,a.ah)(),n.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{children:"Dynamic import"}),"\n",(0,s.jsxs)(e.p,{children:["React.lazy는 컴포넌트 수준의 코드 분할을 통해 컴파일하는 자바스크립트 양을 최적화 할 수 있다. Nextjs의 ",(0,s.jsx)(e.a,{href:"/blog/Nextjs/dynamic.mdx",children:"dynamic"}),"은 React.lazy와 suspense를 합친것이다."]}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading#nextdynamic",children:"https://nextjs.org/docs/app/building-your-application/optimizing/lazy-loading#nextdynamic"})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(e.h2,{children:"dynamic import based url path"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(e.p,{children:"postPath에 따라 mdx 파일을 dynamic import하여 html로 바꿔주는 MdxViewer 컴포넌트를 만들었다. postPath로는 url path가 넘어온다."}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const MdxViewer = ({ postPath, ImageBox }) => {\n  const Post = dynamic(\n    () => import(`${postPath}.mdx`).catch((err) => notFound()),\n    {\n      loading: () => <p>Loading...</p>,\n    }\n  );\n  ...\n}\n"})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(e.p,{children:"postPath로 넘어온 경로를 import하게 되면 실제 파일이 존재하더라도 cannot find module error가 발생한다. webpack에서 어떤 모듈을 미리 로드해야 하는지 알 수 없기 때문이다."}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.img,{src:"/img/blog/error.png",alt:"error"})}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(e.p,{children:"모듈이 존재하는 경로를 prefix로 넣어주면 webpack이 해당 디렉토리의 모듈들을 번들에 포함시킬 수 있다."}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(e.h2,{children:"My Code"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:"const MdxViewer = ({ postPath, ImageBox }) => {\n  const Post = dynamic(\n    () =>\n      import(`@/posts/${postPath}.mdx`).catch((err) => {\n        return notFound();\n      }),\n    {\n      loading: () => <p>Loading...</p>,\n    }\n  );\n  ...\n}\n"})})]})}e.default=function(n={}){let{wrapper:e}=Object.assign({},(0,a.ah)(),n.components);return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(t,n)})):t(n)}}}]);